import { ZModelCodeGenerator } from '@zenstackhq/sdk';
import { DataModel, isDataModel, Model } from '@zenstackhq/sdk/ast';
import { generateObject } from 'ai';
import { openai } from '@ai-sdk/openai';
import { anthropic } from '@ai-sdk/anthropic';
import { xai } from '@ai-sdk/xai';
import { z } from 'zod';
import { mermaidGenerator } from '.';

export async function aiGenerate(model: Model) {
    const zModelGenerator = new ZModelCodeGenerator();
    const zmodel = zModelGenerator.generate(model);

    // OpenAI models: https://platform.openai.com/docs/models
    // Perplexity models: https://docs.perplexity.ai/models/model-cards#search-models
    const aiModel = process.env.OPENAI_API_KEY
        ? openai(process.env.OPENAI_MODEL || 'gpt-4.1-2025-04-14')
        : process.env.ANTHROPIC_API_KEY
        ? anthropic(process.env.ANTHROPIC_MODEL || 'claude-3-5-sonnet-20241022')
        : process.env.PERPLEXITY_API_KEY
        ? anthropic(process.env.PERPLEXITY_MODEL || 'sonar-pro')
        : xai(process.env.XAI_MODEL || 'grok-beta');

    const { object } = await generateObject({
        model: aiModel,
        schema: z.object({
            overview: z.object({
                description: z.string(),
                functionality: z.string(),
            }),
            models: z.array(
                z.object({
                    name: z.string(),
                    access_control_policies: z.array(z.string()),
                })
            ),
        }),
        prompt: `
        You are the expert of ZenStack open-source toolkit. 
        You will generate a technical design document from a provided ZModel schema file that help developer understand the structure and behavior of the application. 
        The document should include the following sections:
        1. Overview 
            a. A short paragraph for the high-level description of this app
            b. Functionality
        2. an array of model. Each model has below two information:
            a. model name
            b. array of access polices explained by plain text
        here is the ZModel schema file:
        \`\`\`zmodel
        ${zmodel}
        \`\`\`
        `,
    });

    const dataModels = model.declarations.filter((x) => isDataModel(x) && !x.isAbstract) as DataModel[];

    const modelChapter = dataModels
        .map((x) => {
            return [
                `### ${x.name}`,
                mermaidGenerator.generate(x),
                object.models
                    .find((model) => model.name === x.name)
                    ?.access_control_policies.map((x) => `- ${x}`)
                    .join('\n'),
            ].join('\n');
        })
        .join('\n');

    const content = [
        `# Technical Design Document`,
        '> Generated by [`ZenStack-markdown`](https://github.com/jiashengguo/zenstack-markdown)',
        `${object.overview.description}`,
        `## Functionality`,
        `${object.overview.functionality}`,
        '## Models:',
        dataModels.map((x) => `- [${x.name}](#${x.name})`).join('\n'),
        modelChapter,
    ].join('\n\n');

    return content;
}
